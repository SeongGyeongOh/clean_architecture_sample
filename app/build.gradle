plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'com.google.gms.google-services'

}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.gyeong.architecturekotlin"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 12
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //DB Scheme Export
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation":
                                      "$projectDir/schemas".toString()]
            }
        }
    }

    signingConfigs {
        release {
            storeFile file('keystore/android_architecture.jks')
            storePassword 'qqqq1111!'
            keyAlias 'android_architecture'
            keyPassword 'qqqq1111!'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        inhouse {
            initWith release
            debuggable true
        }

        debug {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding = true
        dataBinding true
    }

    flavorDimensions("mode")

    def secureProps = new Properties()
    if (file("secure.properties").exists()) {
        file("secure.properties")?.withInputStream { secureProps.load(it) }
    } else {
        throw new FileNotFoundException("Could not read secure.properties")
    }

    //Version
    productFlavors {
        create("dev") {
            dimension = "mode"
            resConfigs("ko", "xxhdpi")
            resValue "string", "apiUrl", (secureProps.getProperty("OPEN_API_URL") ?: "")
        }

        create("prod") {
            dimension = "mode"
            resValue "string", "apiUrl", (secureProps.getProperty("OPEN_API_URL") ?: "")
        }
    }
    packagingOptions {
        exclude "META-INF/AL2.0"
        exclude "META-INF/LGPL2.1"
    }
}

dependencies {

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    def lifecycle_version = "2.3.1"
    def arch_version = "2.1.0"
    def work_version = "2.5.0"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.kotlin_version}"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    androidTestImplementation 'androidx.test:core:1.4.0'

    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidXTestExtKotlinRunnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"

    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"

    // AndroidX Test - JVM testing
    // Application, Activity 등 테스트에 필요한 컴포넌트를 제공함
    testImplementation "androidx.test.ext:junit-ktx:$androidXTestExtKotlinRunnerVersion"
    testImplementation "androidx.test:core-ktx:$androidXTestCoreVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"

    // InstantTaskExecutorRule
    testImplementation "androidx.arch.core:core-testing:$archTestingVersion"

    // Dependencies for Android instrumented unit tests
    androidTestImplementation "junit:junit:$junitVersion"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    //hilt
    implementation "com.google.dagger:hilt-android:2.38.1"
    kapt "com.google.dagger:hilt-android-compiler:2.38.1"
    kaptTest "com.google.dagger:hilt-android-compiler:2.38.1"
    kapt 'androidx.hilt:hilt-compiler:1.0.0'
    implementation 'androidx.hilt:hilt-work:1.0.0'


    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'

    //okhttp
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.2'

    //kotlin serialization
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.2.2"
    implementation("com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.8.0")

    //navigation
    implementation "androidx.navigation:navigation-fragment-ktx:${rootProject.ext.nav_version}"
    implementation "androidx.navigation:navigation-ui-ktx:${rootProject.ext.nav_version}"

    //coroutine
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0'
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0'

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    implementation 'androidx.fragment:fragment-ktx:1.4.0-alpha01'
    implementation "androidx.activity:activity-ktx:1.3.0"

    // Room components
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    androidTestImplementation "androidx.room:room-testing:$rootProject.roomVersion"

    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-core-ktx:2.3.1"

    //glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'

    //recyclerview
    implementation "androidx.recyclerview:recyclerview:1.2.1"

    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'

    // work manager
    implementation "androidx.work:work-runtime-ktx:$work_version"

    // generate barcode
//    implementation "com.google.zxing:core:3.3.3"
//    implementation 'com.journeyapps:zxing-android-embedded:3.2.0@aar'

    // graph library
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    // When using Kotlin.
    kapt 'androidx.hilt:hilt-compiler:1.0.0'

    implementation platform('com.google.firebase:firebase-bom:29.0.0')

    // fastlane screenshot
    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:rules:1.4.0'

    androidTestImplementation 'tools.fastlane:screengrab:2.1.1'
    androidTestImplementation 'com.jraska:falcon:2.2.0'
}
